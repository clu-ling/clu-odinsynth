{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is it? \uf0c1 How do I use it? \uf0c1","title":"Home"},{"location":"#what-is-it","text":"","title":"What is it?"},{"location":"#how-do-i-use-it","text":"","title":"How do I use it?"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"install/","text":"Installation \uf0c1 odinson-ruleutils can be run one of two ways: Local installation of Python library (>= v3.8) Using Docker Python \uf0c1 Requirements \uf0c1 Python (>= v3.8) Install \uf0c1 To install directly from the default branch of the repository: pip install git+https://github.com/clu-ling/odinson-ruleutils.git Docker \uf0c1 Requirements \uf0c1 Docker Install \uf0c1 Docker images are periodically published to DockerHub : docker pull \"parsertongue/odinson-ruleutils:latest\"","title":"Installation"},{"location":"install/#installation","text":"odinson-ruleutils can be run one of two ways: Local installation of Python library (>= v3.8) Using Docker","title":"Installation"},{"location":"install/#python","text":"","title":"Python"},{"location":"install/#requirements","text":"Python (>= v3.8)","title":"Requirements"},{"location":"install/#install","text":"To install directly from the default branch of the repository: pip install git+https://github.com/clu-ling/odinson-ruleutils.git","title":"Install"},{"location":"install/#docker","text":"","title":"Docker"},{"location":"install/#requirements_1","text":"Docker","title":"Requirements"},{"location":"install/#install_1","text":"Docker images are periodically published to DockerHub : docker pull \"parsertongue/odinson-ruleutils:latest\"","title":"Install"},{"location":"tutorial/","text":"Tutorial \uf0c1 All odinson projects should include a tutorial with examples.","title":"Usage"},{"location":"tutorial/#tutorial","text":"All odinson projects should include a tutorial with examples.","title":"Tutorial"},{"location":"dev/documenation/","text":"Documentation \uf0c1 API documentation \uf0c1 We use pdoc to generate our API documentation. To develop with live reloading, use the following command: LaTeX math in docstrings To use LaTeX-style equations, we recommend using raw strings for docstrings: r\"\"\"My docstring Thanks to the r prefix, we can write math without needing to escape \\: $$\\sum_{i=1}^{\\vert X \\vert} x_{i}$$ \"\"\" Docker \uf0c1 # execute the following command from the project root: docker run --rm -it -v $PWD:/app \\ -p 8001:8001 \\ parsertongue/odinson-ruleutils:latest \\ pdoc --html -c latex_math=True --force --output-dir docs/api --http 0.0.0.0:8001 odinson Open your browser to localhost:8001/odinson/ruleutils to see live updates. Anaconda \uf0c1 source activate odinson-ruleutils # execute the following command from the project root: pdoc --html -c latex_math=True --force --output-dir docs/api --http 0.0.0.0:8001 odinson Open your browser to localhost:8001/odinson/ruleutils to see live updates. General documentation \uf0c1 We use mkdocs to generate our site documentation from markdown. Markdown source files are located udner the docs directory. Docker \uf0c1 # execute the following command from the project root: docker run --rm -it -v $PWD:/app \\ -p 8000:8000 \\ parsertongue/odinson-ruleutils:latest \\ mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 to see live updates. Anaconda \uf0c1 To develop the documentation with live reloading, run the following command: source activate odinson-ruleutils # execute the following command from the project root: mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 to see live updates.","title":"Documentation"},{"location":"dev/documenation/#documentation","text":"","title":"Documentation"},{"location":"dev/documenation/#api-documentation","text":"We use pdoc to generate our API documentation. To develop with live reloading, use the following command: LaTeX math in docstrings To use LaTeX-style equations, we recommend using raw strings for docstrings: r\"\"\"My docstring Thanks to the r prefix, we can write math without needing to escape \\: $$\\sum_{i=1}^{\\vert X \\vert} x_{i}$$ \"\"\"","title":"API documentation"},{"location":"dev/documenation/#docker","text":"# execute the following command from the project root: docker run --rm -it -v $PWD:/app \\ -p 8001:8001 \\ parsertongue/odinson-ruleutils:latest \\ pdoc --html -c latex_math=True --force --output-dir docs/api --http 0.0.0.0:8001 odinson Open your browser to localhost:8001/odinson/ruleutils to see live updates.","title":"Docker"},{"location":"dev/documenation/#anaconda","text":"source activate odinson-ruleutils # execute the following command from the project root: pdoc --html -c latex_math=True --force --output-dir docs/api --http 0.0.0.0:8001 odinson Open your browser to localhost:8001/odinson/ruleutils to see live updates.","title":"Anaconda"},{"location":"dev/documenation/#general-documentation","text":"We use mkdocs to generate our site documentation from markdown. Markdown source files are located udner the docs directory.","title":"General documentation"},{"location":"dev/documenation/#docker_1","text":"# execute the following command from the project root: docker run --rm -it -v $PWD:/app \\ -p 8000:8000 \\ parsertongue/odinson-ruleutils:latest \\ mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 to see live updates.","title":"Docker"},{"location":"dev/documenation/#anaconda_1","text":"To develop the documentation with live reloading, run the following command: source activate odinson-ruleutils # execute the following command from the project root: mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 to see live updates.","title":"Anaconda"},{"location":"dev/formatting/","text":"Formatting and style \uf0c1 Code can be auto-formatted using black : Docker \uf0c1 docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" black Anaconda \uf0c1 source activate odinson-ruleutils # execute the following command from the project root: black Typehints \uf0c1 The code makes use of Python type hints. Docker \uf0c1 To perform type checking, run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" mypy --ignore-missing-imports --follow-imports=skip --strict-optional . Anaconda \uf0c1 source activate odinson-ruleutils # execute the following command from the project root: mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Formatting"},{"location":"dev/formatting/#formatting-and-style","text":"Code can be auto-formatted using black :","title":"Formatting and style"},{"location":"dev/formatting/#docker","text":"docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" black","title":"Docker"},{"location":"dev/formatting/#anaconda","text":"source activate odinson-ruleutils # execute the following command from the project root: black","title":"Anaconda"},{"location":"dev/formatting/#typehints","text":"The code makes use of Python type hints.","title":"Typehints"},{"location":"dev/formatting/#docker_1","text":"To perform type checking, run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Docker"},{"location":"dev/formatting/#anaconda_1","text":"source activate odinson-ruleutils # execute the following command from the project root: mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Anaconda"},{"location":"dev/install/","text":"Installation \uf0c1 Anaconda \uf0c1 odinson-ruleutils is written for Python >= v3.8 . One option to develop is to install all virtual environment (ex. conda , venv , poetry , etc.). Using conda , the library can be installed interactively with a compatible environment using the following commands: conda create --name odinson-ruleutils python=3.8 ipython source activate odinson-ruleutils # execute the following command from the project root: pip install -e \".[all]\" # install the pre-commit hooks (as a convenience) pre-commit install -t pre-push [all] will include dependencies for running tests and generating the documentation. Docker \uf0c1 For those familiar with Docker, another option is to use a container with bind mounts as a development environment. Note that the instructions below assume you're developing using a Linux-based environment (they've also been tested on MacOS Catalina). First, you'll need to build the docker image: docker build -f Dockerfile -t \"parsertongue/odinson-ruleutils:latest\" . Launch a container using this image and connect to it: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest /bin/bash\" Thanks to the bind mount, changes made to files locally (i.e., outside of the container) will be reflected inside the running container. The parsertongue/odinson-ruleutils includes Jupyter and iPython: Removing old docker containers, images, etc. \uf0c1 If you want to save some space on your machine by removing images and containers you're no longer using, see the instructions here . As always, use caution when deleting things.","title":"Install"},{"location":"dev/install/#installation","text":"","title":"Installation"},{"location":"dev/install/#anaconda","text":"odinson-ruleutils is written for Python >= v3.8 . One option to develop is to install all virtual environment (ex. conda , venv , poetry , etc.). Using conda , the library can be installed interactively with a compatible environment using the following commands: conda create --name odinson-ruleutils python=3.8 ipython source activate odinson-ruleutils # execute the following command from the project root: pip install -e \".[all]\" # install the pre-commit hooks (as a convenience) pre-commit install -t pre-push [all] will include dependencies for running tests and generating the documentation.","title":"Anaconda"},{"location":"dev/install/#docker","text":"For those familiar with Docker, another option is to use a container with bind mounts as a development environment. Note that the instructions below assume you're developing using a Linux-based environment (they've also been tested on MacOS Catalina). First, you'll need to build the docker image: docker build -f Dockerfile -t \"parsertongue/odinson-ruleutils:latest\" . Launch a container using this image and connect to it: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest /bin/bash\" Thanks to the bind mount, changes made to files locally (i.e., outside of the container) will be reflected inside the running container. The parsertongue/odinson-ruleutils includes Jupyter and iPython:","title":"Docker"},{"location":"dev/install/#removing-old-docker-containers-images-etc","text":"If you want to save some space on your machine by removing images and containers you're no longer using, see the instructions here . As always, use caution when deleting things.","title":"Removing old docker containers, images, etc."},{"location":"dev/test/","text":"Testing \uf0c1 Tests are written by extending the TestCase class from the unittest module in the Python standard library. All tests can be found in the tests directory. Docker \uf0c1 All tests can be run using the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" test-all To run just the unit tests (with code coverage), run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" green -vvv --run-coverage Anaconda \uf0c1 source activate odinson-ruleutils # execute the following command from the project root: green -vvv . Typehints \uf0c1 The code makes use of Python type hints. Docker \uf0c1 To perform type checking, run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" mypy --ignore-missing-imports --follow-imports=skip --strict-optional . Anaconda \uf0c1 source activate odinson-ruleutils # execute the following command from the project root: mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Testing"},{"location":"dev/test/#testing","text":"Tests are written by extending the TestCase class from the unittest module in the Python standard library. All tests can be found in the tests directory.","title":"Testing"},{"location":"dev/test/#docker","text":"All tests can be run using the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" test-all To run just the unit tests (with code coverage), run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" green -vvv --run-coverage","title":"Docker"},{"location":"dev/test/#anaconda","text":"source activate odinson-ruleutils # execute the following command from the project root: green -vvv .","title":"Anaconda"},{"location":"dev/test/#typehints","text":"The code makes use of Python type hints.","title":"Typehints"},{"location":"dev/test/#docker_1","text":"To perform type checking, run the following command: docker run -it -v $PWD:/app \"parsertongue/odinson-ruleutils:latest\" mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Docker"},{"location":"dev/test/#anaconda_1","text":"source activate odinson-ruleutils # execute the following command from the project root: mypy --ignore-missing-imports --follow-imports=skip --strict-optional .","title":"Anaconda"}]}